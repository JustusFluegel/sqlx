var searchIndex = JSON.parse('{\
"sqlx":{"doc":"The async SQL toolkit for Rust, built with ❤️ by the …","t":"IDDNIGIIQNINNNIIQQQINQQQQQQQQQINYEIYNEIIIINNNSNQDNNNDQGNIQNINDQIIQNSIQINKLLLLKLALLMLLLLLLLLLLLKLLLLLLLMLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKKLLLKLLLLLLLMLLLALAKLLLLLLLLLLLLLLLLALKLLLLLALLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLKMLLLLLLLLKLLLLLLLLLKKKLLLLLLLLLLLKKALLLLLAOLLLLLLLLLLLLLKKLLLLLLLLLMLKKLLKKLLALALKLLLLLLLAFKMOFKOOFKAOOOOOOFKOOFKOFKLLLLLLKLLLLLLLLLLLLLLKLLLLLLKKLKLKXKKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKKKKALLLLLLLMMMMMDDDIEGDDDDDDDMLMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMFFLLLLLLLLLLLLLLLMLMLLMMMLLMLLLLLLALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGMQQQQIQQQIIIISQQQQQSQQIKIENNLLLKLLLLLLLNGNNNNNNINNEENNNNNNNNNGNNNDNNLLLLLLLLLLLLLLLLLLLLLLKKFLLLLLLLLLLMMMMMDNNNNIIEDIENNNNNNNNNKLLLLLLLLMMLLLLLLKKMKKKLLLLLLLLLLLLLLLLLLLLLLLKKMLKKLMLLLLLLLLLLLLLLLLLKMMDNEDDNDDLLMLMLMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLMLLLLLLLLMMLMLMALMLMLMLMLLLLLLLLLLLLLLLLNENIIIQQQQQQQIYIYIIYIQIIIYKKKLLKLLKKLKLLKLLKLLLLKLKKKLLKLLKKKKLKLKKKKKKKLKKLLLLKLKDDDDMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLMMLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLDDMLLLMLLLLMLMMMLLLDILLLLLLLLLLLLLLLLLLLLLLLK","n":["Acquire","Any","AnyConnection","AnyDriverError","AnyExecutor","AnyPool","Arguments","Column","Column","ColumnDecode","ColumnIndex","ColumnIndexOutOfBounds","ColumnNotFound","Configuration","ConnectOptions","Connection","Connection","Connection","Connection","Database","Database","Database","Database","Database","Database","Database","Database","Database","Database","Database","Decode","Decode","Decode","Either","Encode","Encode","Err","Error","Execute","Executor","FromRow","IntoArguments","Io","Left","Migrate","NAME","Ok","Options","Pool","PoolClosed","PoolTimedOut","Protocol","QueryBuilder","QueryResult","Result","Right","Row","Row","RowNotFound","Statement","Tls","Transaction","TransactionManager","Type","TypeInfo","TypeInfo","TypeNotFound","URL_SCHEMES","Value","Value","ValueRef","WorkerCrashed","acquire","acquire","acquire","acquire","acquire","add","all","any","any","apply","arguments","as_database_error","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","backend","backend_name","begin","begin","begin","begin","begin","begin","begin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_query_as","build_query_scalar","cached_statements_size","cached_statements_size","cause","cjk_compat_variants","clear_cached_statements","clear_cached_statements","clone","clone","clone_from","clone_into","clone_into","close","close","close","close_event","cmp","collect","column","column","columns","columns","commit","compare","compatible","connect","connect","connect","connect_lazy","connect_lazy_with","connect_options","connect_with","connect_with","connection","consume","count","create_database","database","database_exists","decode","decode","decode","decode_unchecked","default","deref","deref","deref_mut","deref_mut","description","deserialize","dirty_version","disable_statement_logging","drop","drop_database","either","either_into","either_with","encode","encode","encode_by_ref","ensure_migrations_table","eq","equivalent","equivalent","equivalent","error","execute","execute_many","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fetch","fetch_all","fetch_many","fetch_many","fetch_many","fetch_one","fetch_optional","fetch_optional","fetch_optional","fill_buf","find","find_map","flip","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","for_each","force_drop_database","format_placeholder","from","from","from","from","from","from","from","from","from","from","from","from_row","from_url","get","get_unchecked","hash","index","init_len","into","into","into","into","into","into","into","into","into_arguments","into_database_error","into_future","into_inner","into_iter","into_iter","into_sql","is_closed","is_empty","is_left","is_null","is_null","is_null","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","len","list_applied_migrations","lock","log_slow_statements","log_statements","macros","map","map_either","map_either_with","map_left","map_right","migrate","migrate","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","name","name","new","next","next_back","nfc","nfd","nfkc","nfkd","nth","num_idle","open","options","ordinal","parameters","partial_cmp","partition","persistent","ping","ping","poll","pool","position","prelude","prepare","prepare_with","prepare_with","prepare_with","produces","push","push_bind","push_tuples","push_values","query","query","query","query","query","query_as","query_as","query_as","query_as_unchecked","query_as_with","query_as_with","query_builder","query_file","query_file_as","query_file_as_unchecked","query_file_scalar","query_file_scalar_unchecked","query_file_unchecked","query_scalar","query_scalar","query_scalar","query_scalar_unchecked","query_scalar_with","query_scalar_with","query_unchecked","query_with","query_with","read","read_exact","read_line","read_to_end","read_to_string","read_until","reserve","reset","revert","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","rollback","seek","separated","serialize","set_connect_options","shrink_buffers","shrink_buffers","size","size_hint","size_hint","source","source","sql","sql","sql","statement","stream_safe","take_arguments","test","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transaction","try_acquire","try_begin","try_column","try_column","try_decode","try_decode_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get_raw","try_get_unchecked","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","types","unlock","unwrap_left","unwrap_right","with_arguments","write","write_all","write_fmt","index","index","len","source","type_name","Any","AnyArguments","AnyConnectOptions","AnyExecutor","AnyKind","AnyPoolOptions","AnyQueryResult","AnyRow","AnyStatement","AnyTransactionManager","AnyTypeInfo","AnyValue","AnyValueRef","acquire_timeout","add","after_connect","after_release","as_ref","before_acquire","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","columns","columns","connect","database_url","default","default","eq","eq","equivalent","equivalent","equivalent","extend","fair","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_url","idle_timeout","install_default_drivers","install_drivers","into","into","into","into","into","into","into","into","into","into","into_arguments","is_null","is_null","is_null","kind","kind","last_insert_id","log_settings","log_slow_statements","log_statements","max_connections","max_lifetime","min_connections","name","parameters","parent_pool","query","query_as","query_as_with","query_scalar","query_scalar_with","query_with","reexports","reserve","rows_affected","sql","test_before_acquire","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get","try_get_raw","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","AnyConnection","AnyPool","backend","ArgumentBuffer","Arguments","Column","Connection","Database","Database","Database","Database","HasArguments","HasStatement","HasStatementCache","HasValueRef","NAME","QueryResult","Row","Statement","TransactionManager","TypeInfo","URL_SCHEMES","Value","ValueRef","Decode","decode","Encode","IsNull","No","Yes","borrow","borrow_mut","encode","encode_by_ref","from","into","produces","size_hint","try_from","try_into","type_id","AnyDriverError","BoxDynError","CheckViolation","ColumnDecode","ColumnIndexOutOfBounds","ColumnNotFound","Configuration","Database","DatabaseError","Decode","Err","Error","ErrorKind","ForeignKeyViolation","Io","Migrate","NotNullViolation","Ok","Other","PoolClosed","PoolTimedOut","Protocol","Result","RowNotFound","Tls","TypeNotFound","UnexpectedNullError","UniqueViolation","WorkerCrashed","borrow","borrow","borrow_mut","borrow_mut","code","constraint","downcast","downcast_ref","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","into","into","is_check_violation","is_foreign_key_violation","is_unique_violation","kind","message","mismatched_types","table","to_string","try_downcast","try_downcast_ref","try_from","try_from","try_into","try_into","type_id","type_id","index","index","len","source","type_name","AppliedMigration","Dirty","Execute","ForceNotSupported","InvalidMixReversibleAndSimple","Migrate","MigrateDatabase","MigrateError","Migration","MigrationSource","MigrationType","ReversibleDown","ReversibleUp","Simple","Source","VersionMismatch","VersionMissing","VersionNotPresent","VersionTooNew","VersionTooOld","apply","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","checksum","clone","clone","clone","clone_into","clone_into","clone_into","create_database","database_exists","description","dirty_version","drop_database","ensure_migrations_table","eq","file_content","fmt","fmt","fmt","fmt","fmt","force_drop_database","from","from","from","from","from","from_filename","infer","into","into","into","into","is_down_migration","is_reversible","is_up_migration","label","list_applied_migrations","lock","migration_type","new","resolve","revert","source","sql","suffix","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unlock","version","version","CloseEvent","Connection","MaybePoolConnection","Pool","PoolConnection","PoolConnection","PoolConnectionMetadata","PoolOptions","acquire","acquire_timeout","acquire_timeout","after_connect","after_connect","after_release","after_release","age","as_mut","as_ref","before_acquire","before_acquire","begin","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","connect","connect_lazy","connect_lazy_with","connect_with","default","deref","deref","deref_mut","deref_mut","detach","do_until","drop","fair","fmt","fmt","fmt","from","from","from","from","from","from","from","get_acquire_timeout","get_idle_timeout","get_max_connections","get_max_lifetime","get_min_connections","get_test_before_acquire","idle_for","idle_timeout","idle_timeout","into","into","into","into","into","into_future","is_terminated","leak","listener","live","max_connections","max_connections","max_lifetime","max_lifetime","maybe","min_connections","min_connections","new","parent_pool","poll","pool","test_before_acquire","test_before_acquire","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Connection","MaybePoolConnection","PoolConnection","Acquire","ConnectOptions","Connection","Connection","Connection","Database","Database","Database","Database","Database","Decode","Decode","Encode","Encode","Executor","FromRow","FromRow","IntoArguments","Options","Row","Statement","Type","Type","acquire","begin","begin","cached_statements_size","clear_cached_statements","close","column","column","columns","columns","compatible","connect","connect","connect_with","decode","disable_statement_logging","encode","encode_by_ref","execute","execute_many","fetch","fetch_all","fetch_many","fetch_one","fetch_optional","from_row","from_url","get","get_unchecked","into_arguments","is_empty","len","log_slow_statements","log_statements","parameters","ping","prepare","prepare_with","produces","query","query_as","query_as_with","query_scalar","query_scalar_with","query_with","shrink_buffers","size_hint","sql","to_owned","transaction","try_column","try_column","try_get","try_get_raw","try_get_unchecked","type_info","Map","Query","QueryAs","QueryScalar","arguments","bind","bind","bind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","database","execute","execute_many","fetch","fetch","fetch","fetch","fetch_all","fetch_all","fetch_all","fetch_all","fetch_many","fetch_many","fetch_many","fetch_many","fetch_one","fetch_one","fetch_one","fetch_one","fetch_optional","fetch_optional","fetch_optional","fetch_optional","from","from","from","from","inner","inner","inner","into","into","into","into","map","map","mapper","output","persistent","persistent","persistent","persistent","persistent","persistent","persistent","persistent","sql","sql","sql","sql","statement","statement","statement","statement","statement","take_arguments","take_arguments","take_arguments","take_arguments","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_map","try_map","type_id","type_id","type_id","type_id","QueryBuilder","Separated","arguments","borrow","borrow_mut","from","init_len","into","push","push_bind","push_bind_unseparated","push_separator","push_unseparated","query","query_builder","separator","try_from","try_into","type_id","Text","Type","borrow","borrow_mut","clone","clone_into","cmp","compare","compatible","default","deref","deref_mut","eq","equivalent","equivalent","equivalent","fmt","from","into","into_inner","partial_cmp","to_owned","try_from","try_into","type_id","type_info"],"q":[[0,"sqlx"],[447,"sqlx::Error"],[452,"sqlx::any"],[619,"sqlx::any::reexports"],[622,"sqlx::database"],[643,"sqlx::decode"],[645,"sqlx::encode"],[660,"sqlx::error"],[724,"sqlx::error::Error"],[729,"sqlx::migrate"],[823,"sqlx::pool"],[928,"sqlx::pool::maybe"],[931,"sqlx::prelude"],[1010,"sqlx::query"],[1099,"sqlx::query_builder"],[1118,"sqlx::types"],[1144,"core::future::future"],[1145,"alloc::boxed"],[1146,"core::pin"],[1147,"core::marker"],[1148,"core::iter::traits::iterator"],[1149,"core::ops::function"],[1150,"core::option"],[1151,"core::convert"],[1152,"std::ffi::os_str"],[1153,"std::path"],[1154,"core::ffi::c_str"],[1155,"core::convert"],[1156,"core::error"],[1157,"unicode_normalization::replace"],[1158,"core::clone"],[1159,"core::cmp"],[1160,"core::cmp"],[1161,"alloc::sync"],[1162,"std::io"],[1163,"core::ops::deref"],[1164,"core::ops::deref"],[1165,"serde::de"],[1166,"core::fmt"],[1167,"core::iter::traits::collect"],[1168,"std::io"],[1169,"core::hash"],[1170,"core::hash"],[1171,"core::default"],[1172,"core::iter::traits::exact_size"],[1173,"log"],[1174,"core::time"],[1175,"core::iter::traits::double_ended"],[1176,"unicode_normalization::recompose"],[1177,"unicode_normalization::decompose"],[1178,"core::cmp"],[1179,"core::task::poll"],[1180,"std::io"],[1181,"std::io"],[1182,"serde::ser"],[1183,"core::marker"],[1184,"alloc::borrow"],[1185,"core::fmt"],[1186,"sqlx_core::any::driver"],[1187,"sqlx_core::any::type_info"],[1188,"sqlx_core::migrate::migrator"],[1189,"core::ops::function"]],"d":["Acquire connections or transactions from a database in a …","Opaque database driver. Capable of being used in place of …","<strong>SEE DOCUMENTATION BEFORE USE</strong>. Runtime-generic database …","Error occurred within the <code>Any</code> driver mapping to/from the …","An alias for <code>Executor&lt;&#39;_, Database = Any&gt;</code>.","<strong>SEE DOCUMENTATION BEFORE USE</strong>. Type alias for <code>Pool&lt;Any&gt;</code>.","A tuple of arguments to be sent to the database.","","The concrete <code>Column</code> implementation for this database.","Error occurred while decoding a value from a specific …","A type that can be used to index into a <code>Row</code> or <code>Statement</code>.","Column index was out of bounds.","No column found for the given name.","Error occurred while parsing a connection string.","","Represents a single database connection.","","","The concrete <code>Connection</code> implementation for this database.","A database driver.","Error returned from the database.","","","","","","","","","","A type that can be decoded from the database.","Error occurred while decoding a value.","","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Encode a single value to be sent to the database.","","Contains the error value","Represents all the ways a method can fail within SQLx.","A type that may be executed against a database connection.","A type that contains or can provide a database connection …","A record that can be built from a row returned by the …","","Error communicating with the database backend.","A value of type <code>L</code>.","","The display name for this database driver.","Contains the success value","","An asynchronous pool of SQLx database connections.","<code>Pool::close</code> was called while we were waiting in …","A <code>Pool::acquire</code> timed out due to connections not becoming …","Unexpected or invalid data encountered while communicating …","A builder type for constructing queries at runtime.","The concrete <code>QueryResult</code> implementation for this database.","A specialized <code>Result</code> type for SQLx.","A value of type <code>R</code>.","Represents a single row from the database.","The concrete <code>Row</code> implementation for this database.","No rows returned by a query that expected to return at …","An explicitly prepared statement.","Error occurred while attempting to establish a TLS …","An in-progress database transaction or savepoint.","The concrete <code>TransactionManager</code> implementation for this …","Indicates that a SQL type is supported for a database.","Provides information about a SQL type for the database …","The concrete <code>TypeInfo</code> implementation for this database.","Type in query doesn’t exist. Likely due to typo or …","The schemes for database URLs that should match this …","An owned value from the database.","The concrete type used to hold an owned copy of the …","A reference to a single value from the database.","A background worker has crashed.","","","Retrieves a connection from the pool.","","","Add the value to the end of the arguments.","","<strong>SEE DOCUMENTATION BEFORE USE</strong>. Runtime-generic database …","","","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","Get this value as a reference.","","","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","Returns the name of the database backend in use (e.g. …","Begin a new transaction or establish a savepoint within …","","Retrieves a connection and immediately begins a new …","","","","","","","","","","","","","","","","","","","Produce an executable query from this builder.","Produce an executable query from this builder.","Produce an executable query from this builder.","The number of statements currently cached in the …","","","","Removes all statements from the cache, closing them on the …","","","","","","","Explicitly close this database connection.","Shut down the connection pool, immediately waking all …","","Get a future that resolves when <code>Pool::close()</code> is called.","","","Gets the column information at <code>index</code>.","Gets the column information at <code>index</code>.","Get the columns expected to be returned by executing this …","Gets all columns in this statement.","Commits this transaction or savepoint.","","Determines if this Rust type is compatible with the given …","Establish a new database connection with the options …","Create a new connection pool with a default pool …","Establish a new database connection.","Create a new connection pool with a default pool …","Create a new connection pool with a default pool …","Gets a clone of the connection options for this pool","Create a new connection pool with a default pool …","Establish a new database connection with the provided …","","","","","Traits to represent a database driver.","","Provides <code>Decode</code> for decoding values from the database.","Decode a new value of this type using a raw value from the …","Decode this single value into the requested type.","Decode this single value into the requested type.","","","","","","","","","Entirely disables statement logging (both slow and …","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Provides <code>Encode</code> for encoding values for the database.","Writes the value of <code>self</code> into <code>buf</code> in the expected format …","Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.","","","","","","Types for working with errors produced by SQLx.","Execute the query and return the total number of rows …","Execute multiple queries and return the rows affected from …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Execute the query and return the generated results as a …","Execute the query and return all the generated results, …","Execute multiple queries and return the generated results …","","","Execute the query and returns exactly one row.","Execute the query and returns at most one row.","","","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Parse the <code>ConnectOptions</code> from a URL.","Index into the database row and decode a single value.","Index into the database row and decode a single value.","","Returns a valid positional index into the row or …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","Deconstruct this <code>QueryBuilder</code>, returning the built SQL. …","Returns <code>true</code> if <code>.close()</code> has been called on the pool, <code>false</code>…","Returns <code>true</code> if this row has no columns.","Return true if the value is the <code>Left</code> variant.","","Returns <code>true</code> if the SQL value is <code>NULL</code>.","Returns <code>true</code> if the SQL value is <code>NULL</code>.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Returns the number of columns in this row.","","","Log executed statements with a duration above the …","Log executed statements with the specified <code>level</code>","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to [<code>map_either</code>], with an added context <code>ctx</code> …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","Embeds migrations into the binary by expanding to a static …","","","","","","","","","","","","","","Gets the column name or alias.","Returns the database system name of the type. Length …","Start building a query with an initial SQL fragment, which …","","","","","","","","Returns the number of connections active and idle (not in …","","Get the options for this pool","Gets the column ordinal.","Get the expected parameters for this statement.","","","Returns <code>true</code> if the statement should be cached.","Checks if a connection to the database is still valid.","","","Provides the connection pool for asynchronous SQLx …","","Convenience re-export of common traits.","Prepare the SQL query to inspect the type information of …","Prepare the SQL query, with parameter type information, to …","","","","Append a SQL fragment to the query.","Push a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …","Creates <code>((a, b), (..)</code> statements, from <code>tuples</code>.","Push a <code>VALUES</code> clause where each item in <code>tuples</code> represents …","Types and traits for the <code>query</code> family of functions and …","Make a SQL query.","","","Statically checked SQL query with <code>println!()</code> style syntax.","Make a SQL query that is mapped to a concrete type using …","","A variant of [query!] which takes a path to an explicitly …","A variant of [query_as!] which does not check the input or …","Make a SQL query, with the given arguments, that is mapped …","","Runtime query-builder API.","A variant of [query!] where the SQL query is stored in a …","Combines the syntaxes of [query_as!] and [query_file!].","A variant of [query_file_as!] which does not check the …","A variant of query_scalar! which takes a file path like […","A variant of query_file_scalar! which does not typecheck …","A variant of [query_file!] which does not check the input …","Make a SQL query that is mapped to a single concrete type …","","A variant of [query!] which expects a single column from …","A variant of query_scalar! which does not typecheck bind …","Make a SQL query, with the given arguments, that is mapped …","","A variant of [query!] which does not check the input or …","Make a SQL query, with the given arguments.","","","","","","","","Reserves the capacity for at least <code>additional</code> more values …","Reset this <code>QueryBuilder</code> back to its initial state.","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Aborts this transaction or savepoint.","","Start a list separated by <code>separator</code>.","","Updates the connection options this pool will use when …","Restore any buffers in the connection to their default …","","Returns the number of connections currently active. This …","","","","","Get the original SQL text used to create this statement.","Gets the SQL that will be executed.","Get the current build SQL; <strong>note</strong>: may not be syntactically …","Gets the previously cached statement, if available.","","Returns the arguments to be bound against the query string.","Mark an <code>async fn</code> as a test with SQLx support.","Creates an owned statement from this statement reference. …","Creates an owned value from this value reference.","","","","","Execute the function inside a transaction.","Attempts to retrieve a connection from the pool if there …","Attempts to retrieve a connection and immediately begins a …","Gets the column information at <code>index</code> or a …","Gets the column information at <code>index</code> or a …","Decode this single value into the requested type.","Decode this single value into the requested type.","","","","","","","","Index into the database row and decode a single value.","Index into the database row and decode a single value.","Index into the database row and decode a single value.","","","","","","","","","","","","","","","","Returns the canonical SQL type for this Rust type.","Gets the type information for the column.","Get the type information for this value.","Get the type information for this value.","Conversions between Rust and SQL types.","","Returns the left value","Returns the right value","Construct a <code>QueryBuilder</code> with existing SQL and arguments.","","","","","","","","","Opaque database driver. Capable of being used in place of …","","Opaque options for connecting to a database. These may …","An alias for <code>Executor&lt;&#39;_, Database = Any&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Install all currently compiled-in drivers for […","Install the list of drivers for <code>AnyConnection</code> to use.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>SEE DOCUMENTATION BEFORE USE</strong>. Runtime-generic database …","<strong>SEE DOCUMENTATION BEFORE USE</strong>. Type alias for <code>Pool&lt;Any&gt;</code>.","","The concrete type used as a buffer for arguments while …","The concrete <code>Arguments</code> implementation for this database.","The concrete <code>Column</code> implementation for this database.","The concrete <code>Connection</code> implementation for this database.","A database driver.","","","","Associate <code>Database</code> with an <code>Arguments</code> of a generic lifetime.","Associate <code>Database</code> with a <code>Statement</code> of a generic lifetime.","A <code>Database</code> that maintains a client-side cache of prepared …","Associate <code>Database</code> with a <code>ValueRef</code> of a generic lifetime.","The display name for this database driver.","The concrete <code>QueryResult</code> implementation for this database.","The concrete <code>Row</code> implementation for this database.","The concrete <code>Statement</code> implementation for this database.","The concrete <code>TransactionManager</code> implementation for this …","The concrete <code>TypeInfo</code> implementation for this database.","The schemes for database URLs that should match this …","The concrete type used to hold an owned copy of the …","The concrete type used to hold a reference to the …","A type that can be decoded from the database.","Decode a new value of this type using a raw value from the …","Encode a single value to be sent to the database.","The return type of Encode::encode.","The value is not null.","The value is null; no data was written.","","","Writes the value of <code>self</code> into <code>buf</code> in the expected format …","Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Error occurred within the <code>Any</code> driver mapping to/from the …","","Check constraint violation.","Error occurred while decoding a value from a specific …","Column index was out of bounds.","No column found for the given name.","Error occurred while parsing a connection string.","Error returned from the database.","An error that was returned from the database.","Error occurred while decoding a value.","Contains the error value","Represents all the ways a method can fail within SQLx.","The error kind.","Foreign key constraint violation.","Error communicating with the database backend.","","Not-null constraint violation.","Contains the success value","An unmapped error.","<code>Pool::close</code> was called while we were waiting in …","A <code>Pool::acquire</code> timed out due to connections not becoming …","Unexpected or invalid data encountered while communicating …","A specialized <code>Result</code> type for SQLx.","No rows returned by a query that expected to return at …","Error occurred while attempting to establish a TLS …","Type in query doesn’t exist. Likely due to typo or …","An unexpected <code>NULL</code> was encountered during decoding.","Unique/primary key constraint violation.","A background worker has crashed.","","","","","The (SQLSTATE) code for the error.","Returns the name of the constraint that triggered the …","Downcast this generic database error to a specific …","Downcast a reference to this generic database error to a …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the error kind is a violation of a check.","Returns whether the error kind is a violation of a foreign …","Returns whether the error kind is a violation of a …","Returns the kind of the error, if supported.","The primary, human-readable error message.","","Returns the name of the table that was affected by the …","","Downcast this generic database error to a specific …","Downcast a reference to this generic database error to a …","","","","","","","","","","","","","","","","","","","","","In the default implementation, a MigrationSource is a …","Migration Type represents the type of migration","ReversibleDown migrations represents the  delete or …","ReversibleUp migrations represents the  add or update part …","Simple migration are single file migrations with no up / …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A future that resolves when the pool is closed.","","","An asynchronous pool of SQLx database connections.","A connection managed by a <code>Pool</code>.","","Metadata for the connection being processed by a …","Configuration options for <code>Pool</code>.","","Set the maximum amount of time to spend waiting for a …","","Perform an asynchronous action after connecting to the …","","Perform an asynchronous action on a connection before it …","","The duration since the connection was first opened.","","","Perform an asynchronous action on a previously idle …","","","","","","","","","","","","","","","Close this connection, allowing the pool to open a …","Create a new pool from this <code>PoolOptions</code> and immediately …","Create a new pool from this <code>PoolOptions</code>, but don’t open …","Create a new pool from this <code>PoolOptions</code>, but don’t open …","Create a new pool from this <code>PoolOptions</code> and immediately …","","","","","","Detach this connection from the pool, allowing it to open …","Execute the given future until it returns or the pool is …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the maximum amount of time to spend waiting for a …","Get the maximum idle duration for individual connections.","Get the maximum number of connections that this pool …","Get the maximum lifetime of individual connections.","Get the minimum number of connections to maintain at all …","Get’s whether <code>test_before_acquire</code> is currently set.","The duration that the connection spent in the idle queue.","Set a maximum idle duration for individual connections.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Detach this connection from the pool, treating it as …","","","Set the maximum number of connections that this pool …","","Set the maximum lifetime of individual connections.","","","Set the minimum number of connections to maintain at all …","","Returns a default “sane” configuration, suitable for …","","","","If true, the health of a connection will be verified by a …","","","","","","","","","","","","","","","","","","","","","Acquire connections or transactions from a database in a …","","Represents a single database connection.","","","","","","","","A type that can be decoded from the database.","","Encode a single value to be sent to the database.","","A type that contains or can provide a database connection …","A record that can be built from a row returned by the …","","","","Represents a single row from the database.","An explicitly prepared statement.","Indicates that a SQL type is supported for a database.","","","Begin a new transaction or establish a savepoint within …","","The number of statements currently cached in the …","Removes all statements from the cache, closing them on the …","Explicitly close this database connection.","Gets the column information at <code>index</code>.","Gets the column information at <code>index</code>.","Get the columns expected to be returned by executing this …","Gets all columns in this statement.","Determines if this Rust type is compatible with the given …","Establish a new database connection with the options …","Establish a new database connection.","Establish a new database connection with the provided …","Decode a new value of this type using a raw value from the …","Entirely disables statement logging (both slow and …","Writes the value of <code>self</code> into <code>buf</code> in the expected format …","Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>.","Execute the query and return the total number of rows …","Execute multiple queries and return the rows affected from …","Execute the query and return the generated results as a …","Execute the query and return all the generated results, …","Execute multiple queries and return the generated results …","Execute the query and returns exactly one row.","Execute the query and returns at most one row.","","Parse the <code>ConnectOptions</code> from a URL.","Index into the database row and decode a single value.","Index into the database row and decode a single value.","","Returns <code>true</code> if this row has no columns.","Returns the number of columns in this row.","Log executed statements with a duration above the …","Log executed statements with the specified <code>level</code>","Get the expected parameters for this statement.","Checks if a connection to the database is still valid.","Prepare the SQL query to inspect the type information of …","Prepare the SQL query, with parameter type information, to …","","","","","","","","Restore any buffers in the connection to their default …","","Get the original SQL text used to create this statement.","Creates an owned statement from this statement reference. …","Execute the function inside a transaction.","Gets the column information at <code>index</code> or a …","Gets the column information at <code>index</code> or a …","Index into the database row and decode a single value.","Index into the database row and decode a single value.","Index into the database row and decode a single value.","Returns the canonical SQL type for this Rust type.","SQL query that will map its results to owned Rust types.","Raw SQL query with bind parameters. Returned by <code>query</code>.","Raw SQL query with bind parameters, mapped to a concrete …","Raw SQL query with bind parameters, mapped to a concrete …","","Bind a value for use with this SQL query.","Bind a value for use with this SQL query.","Bind a value for use with this SQL query.","","","","","","","","","","Execute the query and return the total number of rows …","Execute multiple queries and return the rows affected from …","Execute the query and return the generated results as a …","Execute the query and return the generated results as a …","Execute the query and return the generated results as a …","Execute the query and return the generated results as a …","Execute the query and return all the generated results, …","Execute the query and return all the generated results, …","Execute the query and return all the generated results, …","Execute the query and return all the generated results, …","Execute multiple queries and return the generated results …","Execute multiple queries and return the generated results …","Execute multiple queries and return the generated results …","Execute multiple queries and return the generated results …","Execute the query and returns exactly one row.","Execute the query and returns exactly one row.","Execute the query and returns exactly one row.","Execute the query and returns exactly one row.","Execute the query and returns at most one row.","Execute the query and returns at most one row.","Execute the query and returns at most one row.","Execute the query and returns at most one row.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Map each row in the result to another type.","Map each row in the result to another type.","","","If <code>true</code>, the statement will get prepared once and cached …","","","","If <code>true</code>, the statement will get prepared once and cached …","","If <code>true</code>, the statement will get prepared once and cached …","","","","","","","","","","","","","","","","","","","","","","","Map each row in the result to another type.","Map each row in the result to another type.","","","","","A builder type for constructing queries at runtime.","A wrapper around <code>QueryBuilder</code> for creating comma(or other …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Push the separator if applicable, and then the given SQL …","Push the separator if applicable, then append a bind …","Push a bind argument placeholder (<code>?</code> or <code>$N</code> for Postgres) …","","Push a SQL fragment without a separator.","","","","","","","Map a SQL text value to/from a Rust type using <code>Display</code> and …","Indicates that a SQL type is supported for a database.","","","","","","","Determines if this Rust type is compatible with the given …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Extract the inner value.","","","","","","Returns the canonical SQL type for this Rust type."],"i":[0,0,0,17,0,0,0,0,5,17,0,17,17,17,0,0,125,126,5,0,17,127,128,126,129,130,120,131,132,133,0,17,0,0,0,0,134,0,0,0,0,0,17,12,17,5,134,128,0,17,17,17,0,5,0,12,0,5,17,0,17,0,5,0,0,5,17,5,0,5,0,17,126,4,4,6,7,127,12,0,12,7,29,17,12,12,12,12,12,12,12,6,12,12,132,12,12,12,12,12,12,12,7,7,128,126,4,4,6,7,7,12,4,6,29,17,7,59,12,4,6,29,17,7,59,29,29,29,128,7,12,12,128,7,12,4,12,12,4,128,4,7,4,12,12,130,131,130,131,6,12,11,125,4,128,4,4,4,4,128,6,12,12,59,0,59,0,45,132,132,29,12,6,12,6,12,12,7,125,6,59,12,12,12,0,10,10,7,12,12,12,12,0,120,120,12,12,12,12,12,12,12,12,120,120,120,4,7,120,120,4,7,12,12,12,12,12,12,12,4,6,17,17,7,59,12,12,59,127,12,12,4,6,29,17,17,17,17,7,59,32,125,131,131,12,42,29,12,12,4,6,29,17,7,59,84,17,12,12,12,12,29,4,131,12,135,132,133,12,12,12,12,12,12,12,12,131,7,7,125,125,0,12,12,12,12,12,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,129,135,29,12,12,12,12,12,12,12,4,6,4,129,130,12,12,54,128,7,12,0,12,0,120,120,4,7,10,29,29,29,29,0,0,130,29,0,0,130,0,0,0,130,0,0,0,0,0,0,0,0,130,0,0,0,130,0,0,130,12,12,12,12,12,12,127,29,7,12,12,12,12,12,12,12,6,12,29,12,4,128,7,4,12,10,12,17,130,54,29,54,12,54,0,130,133,12,4,12,17,128,4,4,130,131,132,132,12,4,6,29,17,7,59,131,131,131,12,4,6,29,17,7,59,12,12,4,6,29,17,7,59,11,129,132,133,0,7,12,12,29,12,12,12,136,137,136,137,138,0,0,0,0,0,0,0,0,0,0,0,0,0,139,100,139,139,101,139,100,106,140,102,103,108,104,83,101,105,100,106,140,102,103,108,104,83,101,105,102,103,104,83,101,105,102,103,104,83,101,105,106,104,103,103,100,108,102,83,102,102,102,108,139,102,103,108,83,83,101,105,100,106,140,102,103,108,104,83,101,105,102,103,103,139,0,0,100,106,140,102,103,108,104,83,101,105,100,83,101,105,83,105,108,103,103,103,139,139,139,83,106,139,106,106,106,106,106,106,0,100,108,106,139,106,102,103,104,83,101,105,105,83,100,106,140,102,103,108,104,83,101,105,104,104,100,106,140,102,103,108,104,83,101,105,100,106,140,102,103,108,104,83,101,105,101,105,0,0,7,141,141,5,5,0,142,141,143,0,0,0,0,5,5,5,143,5,5,5,5,142,0,45,0,0,52,52,52,52,10,10,52,52,10,10,52,52,52,17,0,112,17,17,17,17,17,0,17,134,0,0,112,17,17,112,134,112,17,17,17,0,17,17,17,0,112,17,113,112,113,112,18,18,18,18,112,112,112,112,113,113,112,113,112,113,112,18,18,18,18,18,0,18,113,18,18,113,112,113,112,113,112,136,137,136,137,138,0,67,67,67,67,0,0,0,0,0,0,115,115,115,67,67,67,67,67,67,144,67,16,114,115,67,16,114,115,16,114,16,114,115,16,114,115,145,145,16,144,145,144,115,115,67,67,16,114,115,145,67,67,16,114,115,115,115,67,16,114,115,115,115,115,115,144,144,16,16,146,144,67,16,115,16,114,115,67,67,16,114,115,67,16,114,115,67,16,114,115,144,16,114,0,118,0,0,0,118,0,0,96,79,79,79,79,79,79,119,96,96,79,79,96,118,96,79,38,119,118,96,79,38,119,79,79,96,79,79,79,79,79,118,96,118,96,96,38,96,79,96,79,119,118,118,118,96,79,38,119,79,79,79,79,79,79,119,79,79,118,96,79,38,119,38,38,96,38,96,79,79,79,79,0,79,79,79,79,38,96,79,79,79,118,96,79,38,119,118,96,79,38,119,118,96,79,38,119,118,0,118,0,0,0,125,126,128,126,130,120,131,0,0,0,0,0,0,0,0,128,0,0,0,0,126,128,126,128,128,128,130,131,130,131,11,125,128,128,45,125,10,10,120,120,120,120,120,120,120,32,125,131,131,84,131,131,125,125,130,128,120,120,10,130,130,130,130,130,130,128,10,130,130,128,130,131,131,131,131,11,0,0,0,0,30,30,31,33,30,121,31,33,30,121,31,33,30,30,30,30,121,31,33,30,121,31,33,30,121,31,33,30,121,31,33,30,121,31,33,30,121,31,33,121,31,33,30,121,31,33,30,121,121,31,30,30,121,31,31,33,33,30,30,121,31,33,30,121,31,33,30,30,121,31,33,30,121,31,33,30,121,31,33,30,121,30,121,31,33,0,0,29,90,90,90,29,90,90,90,90,90,90,29,90,90,90,90,90,0,0,124,124,124,124,124,124,11,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[[2,[1]]]]],[]],[[[4,[-1]]],[[3,[[2,[1]]]]],5],[[[4,[-1]]],[[0,[1]]],5],[[[6,[-1]]],[[3,[[2,[1]]]]],5],[7,[[3,[[2,[1]]]]]],[[-1,-2],8,[],[9,10,11]],[[[12,[-1,-2]],-3],13,14,14,15],0,[[[12,[-1,-2]],-3],13,14,14,15],[[7,16],[[3,[[2,[1]]]]]],0,[17,[[19,[18]]]],[[[12,[-2,-3]]],-1,[],[[20,[-1]]],[[20,[-1]]]],[[[12,[-1,-2]]],21,[[20,[21]]],[[20,[21]]]],[[[12,[-1,-2]]],22,[[20,[22]]],[[20,[22]]]],[[[12,[-1,-2]]],23,[[20,[23]]],[[20,[23]]]],[[[12,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]]],24,[[20,[24]]],[[20,[24]]]],[[[12,[-2,-3]]],[[25,[-1]]],[],[[20,[[25,[-1]]]]],[[20,[[25,[-1]]]]]],[[[6,[-1]]],[],5],[[[3,[[12,[-1,-2]]]]],[[12,[[3,[-1]],[3,[-2]]]]],[],[]],[[[3,[[12,[-1,-2]]]]],[[12,[[3,[-1]],[3,[-2]]]]],[],[]],[-1,[],[]],[[[12,[-1,-2]]],23,[[26,[23]]],[[26,[23]]]],[[[12,[-1,-2]]],24,[[26,[24]]],[[26,[24]]]],[[[12,[-1,-2]]],22,[[26,[22]]],[[26,[22]]]],[[[12,[-1,-2]]],21,[[26,[21]]],[[26,[21]]]],[[[12,[-2,-3]]],[[25,[-1]]],[],[[26,[[25,[-1]]]]],[[26,[[25,[-1]]]]]],[[[12,[-2,-3]]],-1,[],[[26,[-1]]],[[26,[-1]]]],[[[12,[-1,-2]]],[[12,[-1,-2]]],[],[]],0,[7,21],[-1,[[3,[[2,[1]]]]],27],[-1,[[3,[[2,[1]]]]],[]],[[[4,[-1]]],[[28,[[6,[-1]],17]]],5],[[[4,[-1]]],[[3,[[2,[1]]]]],5],[[[6,[-1]]],[[3,[[2,[1]]]]],5],[7,[[3,[[2,[1]]]]]],[7,[[3,[[2,[1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1]]],[[30,[-1]]],[5,5]],[[[29,[-1]]],[[31,[-1,-2]]],[5,5],32],[[[29,[-1]]],[[33,[-1,-2]]],[5,5,5],[]],[-1,34,[]],[7,34],[[[12,[-1,-2]]],[[19,[35]]],35,35],[-1,[[36,[-2]]],[],[]],[-1,[[3,[[2,[1]]]]],[]],[7,[[3,[[2,[1]]]]]],[[[12,[-1,-2]]],[[12,[-1,-2]]],37,37],[[[4,[-1]]],[[4,[-1]]],5],[[[12,[-1,-2]],[12,[-1,-2]]],8,37,37],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[-1,[[3,[[2,[1]]]]],[]],[[[4,[-1]]],[[0,[1]]],5],[7,[[3,[[2,[1]]]]]],[[[4,[-1]]],38,5],[[[12,[-1,-2]],[12,[-1,-2]]],39,40,40],[[[12,[-1,-2]]],-3,14,14,41],[[-1,-2],[],[],[[42,[-1]]]],[[-1,-2],[],[],[[42,[-1]]]],[-1,25,[]],[-1,25,[]],[[[6,[-1]]],[[28,[8,17]]],5],[[-1,-2],39,[],[]],[[],13],[-1,[[3,[[2,[1]]]]],[]],[21,[[28,[[4,[-1]],17]]],5],[21,[[3,[[2,[1]]]]]],[21,[[28,[[4,[-1]],17]]],5],[[],[[4,[-1]]],5],[[[4,[-1]]],43,5],[[],[[28,[[4,[-1]],17]]],5],[[],[[3,[[2,[1]]]]]],0,[[[12,[-1,-2]],34],8,44,44],[[[12,[-1,-2]]],34,14,14],[21,[[3,[[2,[1]]]]]],0,[21,[[3,[[2,[1]]]]]],0,[[],[[28,[-1,[2,[35]]]]],[]],[-1,-2,[],[45,11]],[-1,-2,[],45],[[],[[29,[-1]]],5],[[[12,[-1,-2]]],[],46,46],[[[6,[-1]]],[],5],[[[12,[-1,-2]]],[],47,47],[[[6,[-1]]],[],5],[[[12,[-1,-2]]],21,35,35],[-1,[[28,[[12,[-2,-3]]]]],48,49,49],[7,[[3,[[2,[1]]]]]],[-1,-1,[]],[[[6,[-1]]],8,5],[21,[[3,[[2,[1]]]]]],[[[12,[-1,-2]],-3,-4],-5,[],[],50,50,[]],[[[12,[-2,-3]]],-1,[],[[51,[-1]]],[[51,[-1]]]],[[[12,[-1,-2]],-3,-4,-5],-6,[],[],[],50,50,[]],0,[-1,52,27],[-1,52,[]],[7,[[3,[[2,[1]]]]]],[[[12,[-1,-2]],[12,[-1,-2]]],13,53,53],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,[[-1,-2],[[3,[[2,[1]]]]],[],54],[[-1,-2],[[3,[[2,[55]]]]],[],54],[[[12,[-1,-2]],21],-1,[],56],[[[12,[-1,-2]],21],-2,56,[]],[[[12,[-2,-3]],-4],8,[],[[57,[-1]]],[[57,[-1]]],58],[[[12,[[28,[-1,-2]],[28,[-3,-2]]]]],[[28,[[12,[-1,-3]],-2]]],[],[],[]],[[[12,[[8,[-1,-2]],[8,[-1,-3]]]]],[[8,[-1,[12,[-2,-3]]]]],[],[],[]],[[[12,[[19,[-1]],[19,[-2]]]]],[[19,[[12,[-1,-2]]]]],[],[]],[[[12,[[28,[-1,-2]],[28,[-1,-3]]]]],[[28,[-1,[12,[-2,-3]]]]],[],[],[]],[[[12,[[8,[-1,-2]],[8,[-3,-2]]]]],[[8,[[12,[-1,-3]],-2]]],[],[],[]],[[-1,-2],[[3,[[2,[55]]]]],[],54],[[-1,-2],[[3,[[2,[1]]]]],[],54],[[-1,-2],[[3,[[2,[55]]]]],[],54],[[[4,[-1]],-2],[[3,[[2,[55]]]]],5,54],[[7,-1],[[3,[[2,[55]]]]],[[54,[59]]]],[[-1,-2],[[3,[[2,[1]]]]],[],54],[[-1,-2],[[3,[[2,[1]]]]],[],54],[[[4,[-1]],-2],[[3,[[2,[1]]]]],5,54],[[7,-1],[[3,[[2,[1]]]]],54],[[[12,[-1,-2]]],[[28,[[25,[60]],61]]],44,44],[[[12,[-1,-2]],-3],19,14,14,15],[[[12,[-1,-2]],-3],[[19,[-4]]],14,14,15,[]],[[[12,[-1,-2]]],[[12,[-2,-1]]],[],[]],[[[12,[-1,-2]]],[[28,[8,61]]],62,62],[[[12,[-1,-2]],63],[[28,[8,64]]],65,65],[[[12,[-1,-2]],63],[[28,[8,64]]],56,56],[[[4,[-1]],63],[[28,[8,64]]],5],[[[6,[-1]],63],[[28,[8,64]]],5],[[17,63],[[28,[8,64]]]],[[17,63],[[28,[8,64]]]],[[7,63],[[28,[8,64]]]],[[59,63],[[28,[8,64]]]],[[[12,[-1,-2]],-3,-4],-3,14,14,[],15],[[[12,[-1,-2]],-3],8,14,14,15],[21,[[3,[[2,[1]]]]]],[[-1,-2],[[28,[8,64]]],[],66],[[[28,[-1,-2]]],[[12,[-2,-1]]],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[61,17],[-1,-1,[]],[-1,17,18],[67,17],[-1,-1,[]],[-1,-1,[]],[-1,[[28,[-2,17]]],[],[]],[68,[[28,[-1,17]]],[]],[[-1,-2],-3,[],[[42,[-1]]],[45,11]],[[-1,-2],-3,[],[[42,[-1]]],45],[[[12,[-1,-2]],-3],8,69,69,70],[[-1,-2],[[28,[34,17]]],[],[]],0,[[[12,[-1,-2]]],[[28,[-2,-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[17,[[19,[[2,[18]]]]]],[-1,[],[]],[[[12,[-1,-1]]],-1,[]],[[[12,[-1,-2]]],12,58,58],[-1,-2,[],[]],[[[29,[-1]]],71,[5,5]],[[[4,[-1]]],13,5],[-1,13,[]],[[[12,[-1,-2]]],13,[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[[12,[-1,-2]]],13,[],[]],[[[12,[-1,-2]]],19,14,14],[[[12,[-1,-2]]],[[19,[-1]]],[],[]],[[[12,[-1,-2]],-3],[[12,[-4,-2]]],[],[],50,[]],[[[12,[-1,-2]],-1],-1,[],[]],[[[12,[-1,-2]]],-1,72,[]],[[[12,[-1,-2]],-3],-1,[],[],50],[[[12,[-1,-2]]],34,73,73],[-1,34,[]],[7,[[3,[[2,[1]]]]]],[7,[[3,[[2,[1]]]]]],[[-1,74,75],-1,[]],[[-1,74],-1,[]],0,[[[12,[-1,-1]],-2],[[12,[-3,-3]]],[],50,[]],[[[12,[-1,-2]],-3,-4],[[12,[-5,-6]]],[],[],50,50,[],[]],[[[12,[-1,-2]],-3,-4,-5],[[12,[-6,-7]]],[],[],[],50,50,[],[]],[[[12,[-1,-2]],-3],[[12,[-4,-2]]],[],[],50,[]],[[[12,[-1,-2]],-3],[[12,[-1,-4]]],[],[],50,[]],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[8,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[8,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[8,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[8,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[8,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[8,[-2,-3]]],[],[],[]],[-1,[[8,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,8,[]],[-1,[[8,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[8,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[8,[-2,-3,-4]]],[],[],[],[]],[-1,21,[]],[-1,21,[]],[-1,[[29,[-2]]],[[51,[71]]],[5,5]],[[[12,[-1,-2]]],19,14,14],[[[12,[-1,-2]]],19,76,76],[-1,[[77,[-2]]],[],[]],[-1,[[78,[-2]]],[],[]],[-1,[[77,[-2]]],[],[]],[-1,[[78,[-2]]],[],[]],[[[12,[-1,-2]],34],19,14,14],[[[4,[-1]]],34,5],0,[[[4,[-1]]],[[79,[-1]]],5],[-1,34,[]],[-1,[[19,[[12,[25,34]]]]],[]],[[[12,[-1,-2]],[12,[-1,-2]]],[[19,[39]]],80,80],[[[12,[-1,-2]],-3],[[8,[-4,-4]]],14,14,15,[72,57]],[-1,13,[]],[-1,[[3,[[2,[1]]]]],[]],[7,[[3,[[2,[1]]]]]],[[[3,[[12,[-1,-2]]]],81],82,1,1],0,[[[12,[-1,-2]],-3],[[19,[34]]],14,14,15],0,[[-1,21],[[3,[[2,[1]]]]],[]],[[-1,21,25],[[3,[[2,[1]]]]],[]],[[[4,[-1]],21,25],[[3,[[2,[1]]]]],5],[[7,21,[25,[83]]],[[3,[[2,[1]]]]]],[-1,19,[]],[[[29,[-1]],-2],[[29,[-1]]],[5,5],65],[[[29,[-1]],-2],[[29,[-1]]],[5,5],[[10,[-1]],9,[11,[-1]]]],[[[29,[-1]],-2,-3],[[29,[-1]]],[5,5],58,15],[[[29,[-1]],-2,-3],[[29,[-1]]],[5,5],58,15],0,[21,[[30,[-1]]],5],[-1,30,[]],0,0,[21,[[31,[-1,-2]]],5,32],[-1,[[31,[-2]]],[],32],0,0,[[21,-2],[[31,[-1,-3,-2]]],5,[[84,[-1]]],32],[[-1,-2],[[31,[-3,-2]]],[],84,32],0,0,0,0,0,0,0,[21,[[33,[-1,-2]]],5,[]],[-1,[[33,[-2]]],[],[]],0,0,[[21,-2],[[33,[-1,-3,-2]]],5,[[84,[-1]]],[]],[[-1,-2],[[33,[-3,-2]]],[],84,[]],0,[[21,-2],[[30,[-1,-2]]],5,[[84,[-1]]]],[[-1,-2],[[30,[-2]]],[],84],[[[12,[-1,-2]],[25,[60]]],[[28,[34,61]]],85,85],[[[12,[-1,-2]],[25,[60]]],[[28,[8,61]]],85,85],[[[12,[-1,-2]],71],[[28,[34,61]]],44,44],[[[12,[-1,-2]],[86,[60]]],[[28,[34,61]]],85,85],[[[12,[-1,-2]],71],[[28,[34,61]]],85,85],[[[12,[-1,-2]],60,[86,[60]]],[[28,[34,61]]],44,44],[[-1,34,34],8,[]],[[[29,[-1]]],[[29,[-1]]],[5,5]],[[7,16],[[3,[[2,[1]]]]]],[[[12,[-1,-2]],-3],19,76,76,15],[[[12,[-1,-2]],-3,-4],-3,76,76,[],15],[[[12,[-1,-2]]],[[19,[-2]]],[],[]],[[[12,[-1,-2]],-3],[[12,[-1,-4]]],[],[],50,[]],[[[12,[-1,-2]],-2],-2,[],[]],[[[12,[-1,-2]]],-2,[],72],[[[12,[-1,-2]],-3],-2,[],[],50],[[[6,[-1]]],[[28,[8,17]]],5],[[[12,[-1,-2]],87],[[28,[88,61]]],89,89],[[[29,[-1]],-2],[[90,[-1,-2]]],[5,5],65],[[[12,[-1,-2]],-3],28,91,91,92],[[[4,[-1]]],8,5],[-1,8,[]],[7,8],[[[4,[-1]]],93,5],[[[12,[-1,-2]]],[[8,[34,[19,[34]]]]],14,14],[-1,34,[]],[[[12,[-1,-2]]],[[19,[35]]],35,35],[17,[[19,[35]]]],[-1,21,[]],[-1,21,[]],[[[29,[-1]]],21,[5,5]],[-1,19,[]],[-1,[[94,[-2]]],[],[]],[-1,19,[]],0,[-1,[],[]],[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,71,[]],[-1,71,[]],[[-1,-2],[[3,[[2,[1]]]]],27,[50,9,95]],[[[4,[-1]]],[[19,[[96,[-1]]]]],5],[[[4,[-1]]],[[28,[[19,[[6,[-1]]]],17]]],5],[[-1,-2],[[28,[17]]],[],[[42,[-1]]]],[[-1,-2],[[28,[17]]],[],[[42,[-1]]]],[-1,[[28,[-2,17]]],[],[45,11]],[-1,[[28,[-2,17]]],[],45],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[-1,-2],[[28,[-3,17]]],[],[[42,[-1]]],[45,11]],[[-1,-2],[[28,[17]]],[],[[42,[-1]]]],[[-1,-2],[[28,[-3,17]]],[],[[42,[-1]]],45],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[[3,[-1]],81],82,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[[]],[-1,[],[]],[-1,98,[]],[-1,98,[]],0,[7,[[3,[[2,[1]]]]]],[[[12,[-1,-2]]],-1,[],56],[[[12,[-1,-2]]],-2,56,[]],[[-1,-3],[[29,[-2]]],[[51,[71]]],[5,5,5],[[84,[-2]]]],[[[12,[-1,-2]],[25,[60]]],[[28,[34,61]]],62,62],[[[12,[-1,-2]],[25,[60]]],[[28,[8,61]]],62,62],[[[12,[-1,-2]],99],[[28,[8,61]]],62,62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[100,-1],8,[9,10,11]],0,0,[101],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[102,102],[103,103],[104,104],[83,83],[101,101],[105,105],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[106,[[25,[107]]]],[104,[[25,[107]]]],[103,[[3,[[2,[1]]]]]],0,[[],100],[[],108],[[102,102],13],[[83,83],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[108,-1],8,58],0,[[102,63],[[28,[8,64]]]],[[103,63],[[28,[8,64]]]],[[108,63],[[28,[8,64]]]],[[83,63],[[28,[8,64]]]],[[83,63],[[28,[8,64]]]],[[101,63],[[28,[8,64]]]],[[105,63],[[28,[8,64]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,[[28,[102]]]],[21,[[28,[103]]]],[68,[[28,[103,17]]]],0,[[],8],[[[25,[109]]],[[28,[8,[2,[35]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[100,100],[83,13],[101,13],[105,13],[83,110],0,[108,[[19,[111]]]],0,[[103,74,75],103],[[103,74],103],0,0,0,[83,21],[106,[[19,[[12,[[25,[83]],34]]]]]],0,[106,[[30,[100]]]],[106,[[31,[-1]]],32],[[106,-1],[[31,[-2,-1]]],84,32],[106,[[33,[-1]]],[]],[[106,-1],[[33,[-2,-1]]],84,[]],[[106,-1],[[30,[-1]]],84],0,[[100,34,34],8],[108,88],[106,21],0,[106,106],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105],[-1,-2,[],[]],[-1,71,[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[104,-1],[[28,[-2,17]]],[[42,[104]]],[45,11]],[[104,-1],[[28,[17]]],[[42,[104]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[101,98],[105,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[28,[-1,[2,[35]]]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,27],[-1,52,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,19,[]],[-1,34,[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,97,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[19,[[98,[21]]]]],[]],[-1,[[19,[21]]],[]],[[[2,[18]]],[[2,[-1]]],18],[18,-1,18],[[112,112],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[113,63],[[28,[8,64]]]],[[113,63],[[28,[8,64]]]],[[112,63],[[28,[8,64]]]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,112,[]],[-1,21,[]],[[],[[2,[35]]]],[-1,[[19,[21]]],[]],[-1,71,[]],[[[2,[18]]],[[28,[[2,[-1]],[2,[18]]]]],18],[18,[[19,[-1]]],18],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,97,[]],[-1,97,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,16],[[3,[[2,[1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[16,16],[114,114],[115,115],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[21,[[3,[[2,[1]]]]]],[21,[[3,[[2,[1]]]]]],0,[-1,[[3,[[2,[1]]]]],[]],[21,[[3,[[2,[1]]]]]],[-1,[[3,[[2,[1]]]]],[]],[[115,115],13],[115,21],[[67,63],[[28,[8,64]]]],[[67,63],[[28,[8,64]]]],[[16,63],[[28,[8,64]]]],[[114,63],[[28,[8,64]]]],[[115,63],[[28,[8,64]]]],[21,[[3,[[2,[1]]]]]],[-1,-1,[]],[17,67],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,115],[[116,13],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[115,13],[115,13],[115,13],[115,21],[-1,[[3,[[2,[1]]]]],[]],[-1,[[3,[[2,[1]]]]],[]],0,[[111,[98,[21]],115,[98,[21]]],16],[-1,[[3,[[2,[1]]]]],[]],[[-1,16],[[3,[[2,[1]]]]],[]],[67,[[19,[35]]]],0,[115,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,71,[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,[[3,[[2,[1]]]]],[]],0,0,0,0,0,0,0,0,0,0,[[[96,[-1]]],[[3,[[2,[1]]]]],5],[[[79,[-1]],75],[[79,[-1]]],5],0,[[[79,[-1]],-2],[[79,[-1]]],5,[117,9,95]],0,[[[79,[-1]],-2],[[79,[-1]]],5,[117,9,95]],0,0,[[[96,[-1]]],[],5],[[[96,[-1]]],[],5],[[[79,[-1]],-2],[[79,[-1]]],5,[117,9,95]],0,[[[96,[-1]]],[[3,[[2,[1]]]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[79,[-1]]],[[79,[-1]]],5],[[-1,-2],8,[],[]],[[[96,[-1]]],[[28,[8,17]]],5],[[[79,[-1]],21],[[28,[[4,[-1]],17]]],5],[[[79,[-1]],21],[[28,[[4,[-1]],17]]],5],[[[79,[-1]]],[[4,[-1]]],5],[[[79,[-1]]],[[28,[[4,[-1]],17]]],5],[[],[[79,[-1]]],5],[[[118,[-1]]],[],5],[[[96,[-1]]],[],5],[[[118,[-1]]],[],5],[[[96,[-1]]],[],5],[[[96,[-1]]],[],5],[[38,-1],[[28,[17]]],1],[[[96,[-1]]],8,5],0,[[[96,[-1]],63],[[28,[8,64]]],5],[[[79,[-1]],63],[[28,[8,64]]],5],[[119,63],[[28,[8,64]]]],[[[96,[-1]]],[[118,[-1]]],5],[[],[[118,[-1]]],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[79,[-1]]],75,5],[[[79,[-1]]],[[19,[75]]],5],[[[79,[-1]]],93,5],[[[79,[-1]]],[[19,[75]]],5],[[[79,[-1]]],93,5],[[[79,[-1]]],13,5],0,[[[79,[-1]],-2],[[79,[-1]]],5,[[51,[[19,[75]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[38,13],[[[96,[-1]]],[],5],0,0,[[[79,[-1]],93],[[79,[-1]]],5],0,[[[79,[-1]],-2],[[79,[-1]]],5,[[51,[[19,[75]]]]]],0,0,[[[79,[-1]],93],[[79,[-1]]],5],0,[[],[[79,[-1]]],5],0,[[[3,[38]],81],82],0,[[[79,[-1]],13],[[79,[-1]]],5],0,[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[[2,[1]]]]],[]],[-1,[[3,[[2,[1]]]]],27],[-1,[[3,[[2,[1]]]]],[]],[-1,34,[]],[-1,[[3,[[2,[1]]]]],[]],[-1,[[3,[[2,[1]]]]],[]],[[-1,-2],[],[],[[42,[-1]]]],[[-1,-2],[],[],[[42,[-1]]]],[-1,25,[]],[-1,25,[]],[[],13],[-1,[[3,[[2,[1]]]]],[]],[21,[[3,[[2,[1]]]]]],[[],[[3,[[2,[1]]]]]],[[],[[28,[-1,[2,[35]]]]],[]],[-1,-1,[]],[-1,52,27],[-1,52,[]],[[-1,-2],[[3,[[2,[1]]]]],[],54],[[-1,-2],[[3,[[2,[55]]]]],[],54],[[-1,-2],[[3,[[2,[55]]]]],[],54],[[-1,-2],[[3,[[2,[1]]]]],[],54],[[-1,-2],[[3,[[2,[55]]]]],[],54],[[-1,-2],[[3,[[2,[1]]]]],[],54],[[-1,-2],[[3,[[2,[1]]]]],[],54],[-1,[[28,[-2,17]]],[],[]],[68,[[28,[-1,17]]],[]],[[-1,-2],-3,[],[[42,[-1]]],[45,11]],[[-1,-2],-3,[],[[42,[-1]]],45],[-1,[],[]],[-1,13,[]],[-1,34,[]],[[-1,74,75],-1,[]],[[-1,74],-1,[]],[-1,[[19,[[12,[25,34]]]]],[]],[-1,[[3,[[2,[1]]]]],[]],[[-1,21],[[3,[[2,[1]]]]],[]],[[-1,21,25],[[3,[[2,[1]]]]],[]],[-1,19,[]],[-1,30,[]],[-1,[[31,[-2]]],[],32],[[-1,-2],[[31,[-3,-2]]],[],84,32],[-1,[[33,[-2]]],[],[]],[[-1,-2],[[33,[-3,-2]]],[],84,[]],[[-1,-2],[[30,[-2]]],[],84],[-1,8,[]],[-1,34,[]],[-1,21,[]],[-1,[],[]],[[-1,-2],[[3,[[2,[1]]]]],27,[50,9,95]],[[-1,-2],[[28,[17]]],[],[[42,[-1]]]],[[-1,-2],[[28,[17]]],[],[[42,[-1]]]],[[-1,-2],[[28,[-3,17]]],[],[[42,[-1]]],[45,11]],[[-1,-2],[[28,[17]]],[],[[42,[-1]]]],[[-1,-2],[[28,[-3,17]]],[],[[42,[-1]]],45],[[]],0,0,0,0,0,[[[30,[-1]],-2],[[30,[-1]]],5,[9,[10,[-1]],[11,[-1]]]],[[[31,[-1,-2]],-3],[[31,[-1,-2]]],5,[],[9,[10,[-1]],[11,[-1]]]],[[[33,[-1,-2]],-3],[[33,[-1,-2]]],5,[],[9,[10,[-1]],[11,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[30,[-1,-2]],-3],[[28,[17]]],5,[9,[84,[-1]]],120],[[[30,[-1,-2]],-3],[[3,[[2,[55]]]]],5,[9,[84,[-1]]],120],[[[30,[-1,-2]],-3],[[3,[[2,[55]]]]],5,[9,[84,[-1]]],120],[[[121,[-1,-2,-3]],-4],[[3,[[2,[55]]]]],5,[15,9],[9,[84,[-1]]],120],[[[31,[-1,-2,-3]],-4],[[3,[[2,[55]]]]],5,[9,122,32],[[84,[-1]]],120],[[[33,[-1,-2,-3]],-4],[[3,[[2,[55]]]]],5,[9,122],[[84,[-1]]],120],[[[30,[-1,-2]],-3],[[28,[86,17]]],5,[9,[84,[-1]]],120],[[[121,[-1,-2,-3]],-4],[[28,[[86,[-5]],17]]],5,[15,9],[9,[84,[-1]]],120,[9,122]],[[[31,[-1,-2,-3]],-4],[[28,[[86,[-2]],17]]],5,[9,122,32],[[84,[-1]]],120],[[[33,[-1,-2,-3]],-4],[[28,[[86,[-2]],17]]],5,[9,122],[[84,[-1]]],120],[[[30,[-1,-2]],-3],[[3,[[2,[55]]]]],5,[9,[84,[-1]]],120],[[[121,[-1,-2,-3]],-4],[[3,[[2,[55]]]]],5,[15,9],[9,[84,[-1]]],120],[[[31,[-1,-2,-3]],-4],[[3,[[2,[55]]]]],5,[9,122,32],[[84,[-1]]],120],[[[33,[-1,-2,-3]],-4],[[3,[[2,[55]]]]],5,[9,122],[[84,[-1]]],120],[[[30,[-1,-2]],-3],[[28,[17]]],5,[9,[84,[-1]]],120],[[[121,[-1,-2,-3]],-4],[[28,[-5,17]]],5,[15,9],[9,[84,[-1]]],120,[9,122]],[[[31,[-1,-2,-3]],-4],[[28,[-2,17]]],5,[9,122,32],[[84,[-1]]],120],[[[33,[-1,-2,-3]],-4],[[28,[-2,17]]],5,[9,122],[[84,[-1]]],120],[[[30,[-1,-2]],-3],[[28,[19,17]]],5,[9,[84,[-1]]],120],[[[121,[-1,-2,-3]],-4],[[28,[[19,[-5]],17]]],5,[15,9],[9,[84,[-1]]],120,[9,122]],[[[31,[-1,-2,-3]],-4],[[28,[[19,[-2]],17]]],5,[9,122,32],[[84,[-1]]],120],[[[33,[-1,-2,-3]],-4],[[28,[[19,[-2]],17]]],5,[9,122],[[84,[-1]]],120],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1,-2]],-3],[[121,[-1,[0,[15,9]],-2]]],5,[9,[84,[-1]]],[15,9]],[[[121,[-1,-2,-3]],-4],[[121,[-1,[0,[15,9]],-3]]],5,[15,9],[9,[84,[-1]]],[15,9]],0,0,[[[30,[-1,-2]],13],[[30,[-1,-2]]],[5,123],[]],[[[30,[-1,-2]]],13,5,[9,[84,[-1]]]],[[[121,[-1,-2,-3]]],13,5,9,[9,[84,[-1]]]],[[[31,[-1,-2,-3]]],13,5,9,[9,[84,[-1]]]],[[[31,[-1,-2,-3]],13],[[31,[-1,-2,-3]]],[5,123],[],[]],[[[33,[-1,-2,-3]]],13,5,9,[9,[84,[-1]]]],[[[33,[-1,-2,-3]],13],[[33,[-1,-2,-3]]],[5,123],[],[]],0,[[[30,[-1,-2]]],21,5,[9,[84,[-1]]]],[[[121,[-1,-2,-3]]],21,5,9,[9,[84,[-1]]]],[[[31,[-1,-2,-3]]],21,5,9,[9,[84,[-1]]]],[[[33,[-1,-2,-3]]],21,5,9,[9,[84,[-1]]]],[[[30,[-1,-2]]],19,5,[9,[84,[-1]]]],[[[121,[-1,-2,-3]]],19,5,9,[9,[84,[-1]]]],[[[31,[-1,-2,-3]]],19,5,9,[9,[84,[-1]]]],[[[33,[-1,-2,-3]]],19,5,9,[9,[84,[-1]]]],0,[[[30,[-1,-2]]],19,5,[9,[84,[-1]]]],[[[121,[-1,-2,-3]]],19,5,9,[9,[84,[-1]]]],[[[31,[-1,-2,-3]]],19,5,9,[9,[84,[-1]]]],[[[33,[-1,-2,-3]]],19,5,9,[9,[84,[-1]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[[[30,[-1,-2]],-3],[[121,[-1,-3,-2]]],5,[9,[84,[-1]]],[15,9]],[[[121,[-1,-2,-3]],-4],[[121,[-1,[0,[15,9]],-3]]],5,[15,9],[9,[84,[-1]]],[15,9]],[-1,97,[]],[-1,97,[]],[-1,97,[]],[-1,97,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],0,[-1,-2,[],[]],[[[90,[-1,-2]],-3],[[90,[-1,-2]]],5,65,65],[[[90,[-1,-2]],-3],[[90,[-1,-2]]],5,65,[[10,[-1]],9,[11,[-1]]]],[[[90,[-1,-2]],-3],[[90,[-1,-2]]],5,65,[[10,[-1]],9,[11,[-1]]]],0,[[[90,[-1,-2]],-3],[[90,[-1,-2]]],5,65,65],0,0,0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,97,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1]]],[[124,[-1]]],37],[[-1,-2],8,[],[]],[[[124,[-1]],[124,[-1]]],39,40],[[-1,-2],39,[],[]],[[],13],[[],[[124,[-1]]],72],[[[124,[-1]]],[],[]],[[[124,[-1]]],[],[]],[[[124,[-1]],[124,[-1]]],13,53],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[124,[-1]],63],[[28,[8,64]]],56],[-1,-1,[]],[-1,-2,[],[]],[[[124,[-1]]],-1,[]],[[[124,[-1]],[124,[-1]]],[[19,[39]]],80],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,97,[]],[[]]],"c":[733],"p":[[8,"Future",1144],[3,"Box",1145],[3,"Pin",1146],[3,"Pool",0],[8,"Database",0],[3,"Transaction",0],[3,"AnyConnection",0],[15,"tuple"],[8,"Send",1147],[8,"Encode",0],[8,"Type",0],[4,"Either",0],[15,"bool"],[8,"Iterator",1148],[8,"FnMut",1149],[3,"Migration",729],[4,"Error",0],[8,"DatabaseError",660],[4,"Option",1150],[8,"AsMut",1151],[15,"str"],[3,"OsStr",1152],[3,"Path",1153],[3,"CStr",1154],[15,"slice"],[8,"AsRef",1151],[8,"Sized",1147],[4,"Result",1155],[3,"QueryBuilder",0],[3,"Query",1010],[3,"QueryAs",1010],[8,"FromRow",0],[3,"QueryScalar",1010],[15,"usize"],[8,"Error",1156],[3,"Replacements",1157],[8,"Clone",1158],[3,"CloseEvent",823],[4,"Ordering",1159],[8,"Ord",1159],[8,"FromIterator",1160],[8,"ColumnIndex",0],[3,"Arc",1161],[8,"BufRead",1162],[8,"Decode",0],[8,"Deref",1163],[8,"DerefMut",1163],[8,"Deserializer",1164],[8,"Deserialize",1164],[8,"FnOnce",1149],[8,"Into",1151],[4,"IsNull",645],[8,"PartialEq",1159],[8,"Execute",0],[8,"Stream",1165],[8,"Debug",1166],[8,"Extend",1160],[8,"IntoIterator",1160],[3,"Any",0],[15,"u8"],[3,"Error",1167],[8,"Write",1162],[3,"Formatter",1166],[3,"Error",1166],[8,"Display",1166],[8,"Write",1166],[4,"MigrateError",729],[3,"Url",1168],[8,"Hash",1169],[8,"Hasher",1169],[3,"String",1170],[8,"Default",1171],[8,"ExactSizeIterator",1172],[4,"LevelFilter",1173],[3,"Duration",1174],[8,"DoubleEndedIterator",1175],[3,"Recompositions",1176],[3,"Decompositions",1177],[3,"PoolOptions",823],[8,"PartialOrd",1159],[3,"Context",1178],[4,"Poll",1179],[3,"AnyTypeInfo",452],[8,"IntoArguments",0],[8,"Read",1162],[3,"Vec",1180],[4,"SeekFrom",1162],[15,"u64"],[8,"Seek",1162],[3,"Separated",1099],[8,"Serialize",1181],[8,"Serializer",1181],[15,"u32"],[3,"StreamSafe",1182],[8,"Sync",1147],[3,"PoolConnection",823],[3,"TypeId",1183],[4,"Cow",1184],[3,"Arguments",1166],[3,"AnyArguments",452],[3,"AnyValue",452],[4,"AnyKind",452],[3,"AnyConnectOptions",452],[3,"AnyRow",452],[3,"AnyValueRef",452],[3,"AnyStatement",452],[3,"AnyColumn",1185],[3,"AnyQueryResult",452],[3,"AnyDriver",1186],[4,"AnyTypeInfoKind",1187],[15,"i64"],[4,"ErrorKind",660],[3,"UnexpectedNullError",660],[3,"AppliedMigration",729],[4,"MigrationType",729],[3,"Migrator",1188],[8,"Fn",1149],[4,"MaybePoolConnection",823],[3,"PoolConnectionMetadata",823],[8,"Executor",0],[3,"Map",1010],[8,"Unpin",1147],[8,"HasStatementCache",622],[3,"Text",1118],[8,"ConnectOptions",0],[8,"Acquire",0],[8,"Arguments",0],[8,"Connection",0],[8,"Column",0],[8,"Statement",0],[8,"Row",0],[8,"Value",0],[8,"ValueRef",0],[6,"Result",0],[8,"TypeInfo",0],[13,"ColumnIndexOutOfBounds",724],[13,"ColumnDecode",724],[13,"TypeNotFound",724],[6,"AnyPoolOptions",452],[3,"AnyTransactionManager",452],[8,"HasArguments",622],[8,"HasValueRef",622],[8,"HasStatement",622],[8,"Migrate",729],[8,"MigrateDatabase",729],[8,"MigrationSource",729]],"b":[[73,"impl-Acquire%3C\'a%3E-for-%26Pool%3CDB%3E"],[74,"impl-Pool%3CDB%3E"],[84,"impl-AsMut%3CTarget%3E-for-Either%3CL,+R%3E"],[85,"impl-AsMut%3Cstr%3E-for-Either%3CL,+R%3E"],[86,"impl-AsMut%3COsStr%3E-for-Either%3CL,+R%3E"],[87,"impl-AsMut%3CPath%3E-for-Either%3CL,+R%3E"],[88,"impl-Either%3CL,+R%3E"],[89,"impl-AsMut%3CCStr%3E-for-Either%3CL,+R%3E"],[90,"impl-AsMut%3C%5BTarget%5D%3E-for-Either%3CL,+R%3E"],[95,"impl-AsRef%3CPath%3E-for-Either%3CL,+R%3E"],[96,"impl-AsRef%3CCStr%3E-for-Either%3CL,+R%3E"],[97,"impl-AsRef%3COsStr%3E-for-Either%3CL,+R%3E"],[98,"impl-AsRef%3Cstr%3E-for-Either%3CL,+R%3E"],[99,"impl-AsRef%3C%5BTarget%5D%3E-for-Either%3CL,+R%3E"],[100,"impl-AsRef%3CTarget%3E-for-Either%3CL,+R%3E"],[101,"impl-Either%3CL,+R%3E"],[106,"impl-Pool%3CDB%3E"],[107,"impl-Acquire%3C\'a%3E-for-%26Pool%3CDB%3E"],[109,"impl-Acquire%3C\'c%3E-for-%26mut+AnyConnection"],[110,"impl-Connection-for-AnyConnection"],[217,"impl-Display-for-Either%3CL,+R%3E"],[218,"impl-Debug-for-Either%3CL,+R%3E"],[221,"impl-Debug-for-Error"],[222,"impl-Display-for-Error"],[234,"impl-From%3CError%3E-for-Error"],[236,"impl-From%3CE%3E-for-Error"],[237,"impl-From%3CMigrateError%3E-for-Error"],[519,"impl-Debug-for-AnyTypeInfo"],[520,"impl-Display-for-AnyTypeInfo"],[701,"impl-Display-for-UnexpectedNullError"],[702,"impl-Debug-for-UnexpectedNullError"],[774,"impl-Debug-for-MigrateError"],[775,"impl-Display-for-MigrateError"],[873,"impl-From%3CPoolConnection%3CDB%3E%3E-for-MaybePoolConnection%3C\'c,+DB%3E"],[874,"impl-From%3C%26mut+%3CDB+as+Database%3E::Connection%3E-for-MaybePoolConnection%3C\'c,+DB%3E"],[1064,"impl-Query%3C\'q,+DB,+A%3E"],[1065,"impl-Execute%3C\'q,+DB%3E-for-Query%3C\'q,+DB,+A%3E"],[1067,"impl-Execute%3C\'q,+DB%3E-for-QueryAs%3C\'q,+DB,+O,+A%3E"],[1068,"impl-QueryAs%3C\'q,+DB,+O,+A%3E"],[1069,"impl-Execute%3C\'q,+DB%3E-for-QueryScalar%3C\'q,+DB,+O,+A%3E"],[1070,"impl-QueryScalar%3C\'q,+DB,+O,+A%3E"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
